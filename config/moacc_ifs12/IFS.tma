%{
  /* IFS.tma for cambridgebay_ifs13 */
  #include <stdlib.h> /* for abs() */
  #include <time.h>
  #include "dasio/cmd_writer.h"
  #include "location.h"
  #include "nl.h"

  int DayOfYear(time_t now) {
    struct tm *times = gmtime(&now);
    return times->tm_yday;
  }

  /* This makes a stab at using local standard time based on
   * longitude. This will work most of the year, but not in
   * midsummer, when we are starting up after local midnight.
   * I am going to turn the clock back another 2 hours, to
   * account for pump down time before the scan. This will
   * not come close to affecting the midwinter startup
   * shortly after local noon.
   */
  int16_t DayOfWeek(int32_t now) {
    int32_t dt =
      (now+(int32_t)(LONGITUDE()*240)-2*3600)/(24L*60*60);
    int16_t DoW = dt%7;
    return DoW;
  }

  const char *Weather_Reason = "Startup";
%}

%{
  /* HercDioB status monitor goes here */
%}

State Init {
      > Telemetry Start
      > _Algo P1 Init
   +1 > Radiance Open Threshold Set 70 percent
      > Radiance Close Threshold Set 60 percent
      > RH Open Threshold Set 88 percent
      > RH Close Threshold Set 90 percent
   +1 Validate Check_Unexpected;
}

State Check_Unexpected "Unexpected.tmas" {
     > _Algo P1 Check_Unexpected
  +1 > Startup Unexpected Set
     Validate Init_Wakeup;

   # This will never occur, but will improve visualization
  +1 Validate Unexpected_Restart;
}

State Init_Wakeup "Wakeup.tmas" {
     > _Algo P1 Init_Wakeup
  +1 Validate Init_Choice;

   # This will never occur, but will improve visualization
  +1 Validate Up_After_Bedtime;
}

State Init_Choice "Startup.tmas" {
     > _Algo P1 Init_Choice
     Hold until ( SWStat == SWS_TIME_WARP ) or 2:00;

## Uncomment IFS commands
# +1 > IFS Time Synch
#    > IFS Set Preamp Gains 3 3
# Don't set InSb preamp gain until after filling.

  +1 Validate Init_Decide;

   # These will never occur, but are here
   # to improve the visualization
  +1 Validate Holding;
  +1 Validate Holding_with_Lamp_Runs;
  +1 Validate Failure;
}

State Init_Decide {
#    > IFS Read Status
     > _Algo P1 Init_Decide
  +2 { if ( convert(Sol_ele) <= 0. ) Validate Init_Close; }
  +2 depending on ( Bad_Weather ) { Validate Nap; }
 +10 Validate Ready_To_Play;
}

State Unexpected_Restart {
  > Startup Unexpected Set
  > Email Error Message Unexpected Restart, Entering Holding
  Validate Holding;
}

State Holding {
      > _Algo P1 Holding
      Validate Dome_Close;
      > Startup Define Validate Holding;
      Hold until valid (Solar_Bedtime);
   +1 > Savelog Shutdown from Holding
      > Startup Wakeup Clear
      Validate Shutdown;
}

State Holding_with_Lamp_Runs {
      > _Algo P1 Holding_with_Lamp_Runs
      Validate Dome_Close;
      Validate IFS_Status_Update;
      > Startup Define Validate Holding_with_Lamp_Runs;
      Hold until valid (Solar_Bedtime);
   +1 > Savelog Shutdown from Holding_with_Lamp_Runs
      > Startup Wakeup Set
      Validate Shutdown;
}

State Failure {
     > _Algo P1 Failure
     > IFS Direct VAC=0
  +2 > IFS Direct SRC=0
  +1 > Enclosure Close
  +1 > IFS IdleScan
 +60 > Power Pump Off
  +1 > Startup Define Validate Failure;
     Hold until valid (Solar_Bedtime);
  +1 > Savelog Shutdown from Failure
     Validate Shutdown;
#  Each Failure Partition sends its own email for help.
}

State Init_Close {
  > _Algo P1 Init_Close
  Validate Dome_Close;
  Validate Sleep;
}

State ReInit {
  > _Algo P1 ReInit
  > Startup Clear
  Validate Watchdog_Okay;
  Validate Init_Choice;
}

State ReInit_and_Pump_Down {
  > _Algo P1 ReInit_and_Pump_Down
  > Startup Clear
  Validate Watchdog_Okay;
  Validate Pump_Down;
}

State Pump_Down {
      > _Algo P1 Pump_Down
  Hold Until ( IFSCStat == IFS_SCAN_IDLE ||
               IFSCStat == IFS_SCAN_WAIT) OR 4:00;
  Validate IFS_Status_Update;
  Validate Pump_Down_Init;
  Hold until Valid (Pump_Idle);
  +10 Validate Init_Choice;
}

State Sleep {
  depending on ( Watchdog_Error ) { Validate Failure; }
  depending on ( Solar_Bedtime ) { Validate Bedtime; }
  > _Algo P1 Sleep
  > Sun Tracker Sleep
  Validate IFS_Status_Update;
  Hold Until ( convert(Sol_ele) > 0. );
  Validate Wake_Up;
}

State Wake_Up {
    depending on ( Watchdog_Error ) { Validate Failure; }

    > _Algo P1 Wake_Up
#+1 { if (convert(LN2Depth) < 15)
#       ci_sendfcmd(Cmd_Send, "Email Warning Message LN2 Tank depth is %.1lf\n",
#         convert(LN2Depth));
#   }
 +1 Validate IFS_Status_Update;
#+1 Validate InSb_Fill;
#+1 Validate Pump_Down_Init;
#   Hold until Valid (Pump_Idle);
    > Email Report Message Container has completed Wake_Up sequence.
    depending on ( Good_Weather ) { Validate Ready_To_Play; }
    depending on ( Solar_Bedtime ) { Validate Bedtime; }
}

State Ready_To_Play {
  depending on ( Watchdog_Error ) { Validate Failure; }
  depending on ( Solar_Bedtime ) { Validate Bedtime; }
  depending on ( Bad_Weather) { Validate Nap; }

  > _Algo P1 Ready_To_Play
  depending on (Pump_IFS_Constantly) {
    Validate Ready_To_Play2;
  }
  Validate Pump_IFS_Prep;
  Hold Until Valid ( Pump_IFS_Constantly );
  Validate Ready_To_Play2;
}

State Ready_To_Play2 {
  > _Algo P1 Ready_To_Play2
  Validate Dome_Open;
  > Sun Tracker Track To Programmed Sun Position
  Hold Until Valid ( Dome_Opened ) or 2:00;
  > Sun Tracker Track by CamTracker

  > Email Report Message Enclosure opened in Ready_to_Play2

  Hold Until ( (IFSCStat == IFS_SCAN_IDLE ||
                IFSCStat == IFS_SCAN_WAIT ) &&
               ST_modus == ST_MODE_TMR );

    > Email Report Message Scanning
   #We do this on wakeup at ETL:
   #depending on (InSb_Startup) { Validate InSb_Fill; }
 +1 Validate IFS_Status_Idle;
#   depending on (InSb_Filled) { Validate Init_Set_InSb_Gains; }
#   depending on (InSb_Chilled) { Validate Play; }
 +1 > Email Warning Message Starting in Play_InGaAs: !InSb_Chilled
 +1 Validate Play_InGaAs;
}

# State Init_Set_InSb_Gains {
#   > _Algo P1 Init_Set_InSb_Gains
# }

# State Play NoLog {
#   > _Algo P1 Play
# }

State Play_InGaAs NoLog {
  depending on ( Watchdog_Error ) { Validate Failure; }
  { if ( Convert(Sol_ele) < 0. ) Validate Bedtime; }
  depending on ( Bad_Weather) { Validate Nap; }
  { if ( IFSCStat == IFS_SCAN_ERROR ) {
      Validate Scanner_Failure;
    } else if (IFSCStat == IFS_SCAN_INSBNR) {
      Validate Scanner_InSbNR;
    } else if (IFSCStat == IFS_SCAN_CANERR) {
      Validate Scanner_CAN_Err;
    }
  }
  
  > _Algo P1 Play_InGaAs
  > IFS SolarInGaAs
  Hold Until ((IFSCStat != IFS_SCAN_IDLE) &&
              (IFSCStat != IFS_SCAN_WAIT));
  Hold Until ( (IFSCStat == IFS_SCAN_IDLE ||
                IFSCStat == IFS_SCAN_WAIT ) &&
               ST_modus == ST_MODE_TMR);
  > IFS SolarInGaAsLR
# depending on (Refill_Ready) { Validate Refill_Now; }
  +1
    Hold Until ((IFSCStat != IFS_SCAN_IDLE) &&
                (IFSCStat != IFS_SCAN_WAIT));
    Hold Until ( (IFSCStat == IFS_SCAN_IDLE ||
                  IFSCStat == IFS_SCAN_WAIT ) &&
                 ST_modus == ST_MODE_TMR);
  > IFS SolarInGaAsLR
    Hold Until ((IFSCStat != IFS_SCAN_IDLE) &&
                (IFSCStat != IFS_SCAN_WAIT));
    Hold Until ( (IFSCStat == IFS_SCAN_IDLE ||
                  IFSCStat == IFS_SCAN_WAIT ) &&
                 ST_modus == ST_MODE_TMR);

#+1  depending on (InSb_Filled) { Validate Init_Set_InSb_Gains; }
#    depending on (InSb_Chilled) { Validate Play; }
 +1  Validate Play_InGaAs;
}

State Scanner_Failure {
   > _Algo P1 Scanner_Failure
   > Email Error Message Scanner failure.
   Validate Failure;
}

State Scanner_CAN_Err {
  depending on ( Watchdog_Error ) { Validate Failure; }
  { if ( Convert(Sol_ele) < 0. ) Validate Bedtime; }
  depending on ( Bad_Weather) { Validate Nap; }
  { if ( IFSCStat == IFS_SCAN_ERROR ) {
      Validate Scanner_Failure;
    } else if (IFSCStat == IFS_SCAN_INSBNR) {
      Validate Scanner_InSbNR;
    }
  }
  
  > _Algo P1 Scanner_CAN_Err
  > Email Warning Message IFS Reports a CAN Error on AP2|APT|SRC|RES|VEL|PHR

  Hold Until ( (IFSCStat == IFS_SCAN_IDLE ||
                IFSCStat == IFS_SCAN_WAIT ) &&
               ST_modus == ST_MODE_TMR );

#   depending on (InSb_Chilled) { Validate Play; }
 +1 Validate Play_InGaAs;
}

State Scanner_InSbNR {
  depending on ( Watchdog_Error ) { Validate Failure; }
  { if ( Convert(Sol_ele) < 0. ) Validate Bedtime; }
  depending on ( Bad_Weather) { Validate Nap; }

  > _Algo P1 Scanner_InSbNR
  > Email Warning Message Unexpected InSb Not Ready Error. Reverting to InGaAs
  Validate InSb_Not_Chilled;

  Hold Until ( (IFSCStat == IFS_SCAN_IDLE ||
               IFSCStat == IFS_SCAN_WAIT ) &&
              ST_modus == ST_MODE_TMR );
                  
   +1 Validate Play_InGaAs;
}

State Nap {
  depending on ( Watchdog_Error ) { Validate Failure; }
  depending on ( Good_Weather ) { Validate Ready_To_Play; }

  { ci_sendfcmd(Cmd_Send,
      "Email Report Message Container has entered Nap State due to %s\n",
      Weather_Reason ); }
  > _Algo P1 Nap
  Validate Dome_Close;
  # Wait specifically for IDLE before starting IFS_Status_Update
  Hold Until ( IFSCStat == IFS_SCAN_IDLE) or 4:00;
  Validate IFS_Status_Update;
  depending on ( Solar_Bedtime ) { Validate Lights_Out; }
}

State Bedtime {
  depending on (Watchdog_Error ) { Validate Failure; }
  depending on (Bad_Weather) { Validate Nap; }
      > _Algo P1 Bedtime
      Hold Until ( IFSCStat == IFS_SCAN_IDLE || IFSCStat == IFS_SCAN_WAIT ) or 4:00;
      Validate Dome_Close;
      > Sun Tracker Sleep
      > Email Report Message Enclosure closed for the evening
  +10 Validate Lights_Out;
}

# Replaces Bedtime_Story
State Up_After_Bedtime {
  > _Algo P1 Up_After_Bedtime
  > Startup Wakeup Clear
  Validate Pump_Down_Init;
  Hold until Valid (Pump_Idle);

  # Do Cell scans on Monday
  Validate IFS_Status_Idle;
  { /*
    if (DayOfWeek(itime()) == 4)
      Validate Midnight_Snack;
    */
  }
  +1  Validate Init_Choice;
}

State Midnight_Snack {
        depending on (Watchdog_Error ) { Validate Failure; }
        > _Algo P1 Midnight_Snack
     +1 > IFS Direct SRC=104
  +1:00 depending on (InSb_Filled) { Validate InSb_Midnight_Snack; }
        depending on (InSb_Chilled) { Validate InSb_Midnight_Snack; }
     +1 Validate InGaAs_Midnight_Snack;
}

State Lights_Out {
  > _Algo P1 Lights_Out
# > IFS Direct SRC=0
# > IFS Set Preamp Gains 3 3
  Hold Until ( (IFSCStat == IFS_SCAN_IDLE) ||
                (IFSCStat == IFS_SCAN_WAIT) );
  > SaveLog Bedtime Shutdown
  > Startup Wakeup Set
  Validate Quick_Shutdown;
}

State InSb_Midnight_Snack {
  depending on (Watchdog_Error ) { Validate Failure; }
  { if ( IFSCStat == IFS_SCAN_ERROR ) {
      Validate Scanner_Failure;
    } else if (IFSCStat == IFS_SCAN_INSBNR) {
      Validate Snacktime_InSbNR;
    } else if (IFSCStat == IFS_SCAN_CANERR) {
      Validate Snacktime_CAN_Err;
    }
  }

      > _Algo P1 InSb_Midnight_Snack
      > IFS Direct DTC=0x4020
      > IFS Direct PGN=3
      > IFS Cellres02
      Hold Until ((IFSCStat != IFS_SCAN_IDLE) &&
                  (IFSCStat != IFS_SCAN_WAIT));
      Hold Until ((IFSCStat == IFS_SCAN_IDLE) ||
                  (IFSCStat == IFS_SCAN_WAIT) );
  +1  Validate Init_Choice;
}

State InGaAs_Midnight_Snack {
  depending on (Watchdog_Error ) { Validate Failure; }
  { if ( IFSCStat == IFS_SCAN_ERROR ) {
      Validate Scanner_Failure;
    } else if (IFSCStat == IFS_SCAN_INSBNR) {
      Validate Snacktime_InSbNR;
    } else if (IFSCStat == IFS_SCAN_CANERR) {
      Validate Snacktime_CAN_Err;
    }
  }

      > _Algo P1 InGaAs_Midnight_Snack
      > IFS Set Preamp Gains 3 3
      > IFS InGaAsCellres02
      Hold Until ((IFSCStat != IFS_SCAN_IDLE) &&
                  (IFSCStat != IFS_SCAN_WAIT));
      Hold Until ((IFSCStat == IFS_SCAN_IDLE) ||
                  (IFSCStat == IFS_SCAN_WAIT));
   +1 Validate Init_Choice;
}

State Snacktime_InSbNR {
  > _Algo P1 Snacktime_InSbNR
  > Email Warning Message InSb Not Ready during bedtime scan
  Validate Init_Choice;
}

State Snacktime_CAN_Err {
  depending on ( Watchdog_Error ) { Validate Failure; }
  { if ( IFSCStat == IFS_SCAN_ERROR ) {
      Validate Scanner_Failure;
    } else if (IFSCStat == IFS_SCAN_INSBNR) {
      Validate Snacktime_InSbNR;
    }
  }
  
  > _Algo P1 Snacktime_CAN_Err
  > Email Warning Message IFS Reports a CAN Error on AP2|APT|SRC|RES|VEL|PHR (bedtime)

  Hold Until ( (IFSCStat == IFS_SCAN_IDLE ||
                IFSCStat == IFS_SCAN_WAIT ) );

  +1 Validate Init_Choice;
}

# Just Make sure IFS gets to idle mode, but leave
# Dome where it is.
State Quick_Shutdown {
  > _Algo P1 Quick_Shutdown
  "Waiting for IFS Idle";
  Hold Until ( IFSCStat == IFS_SCAN_IDLE );
  Validate Shutdown;
}

# Interactive full shutdown
# Make sure IFS gets to idle, then close up
State Full_Shutdown {
  > _Algo P1 Full_Shutdown
  "Waiting for IFS Idle";
  Hold Until ( IFSCStat == IFS_SCAN_IDLE ) OR 1:00;
  Validate Dome_Close;
  "Waiting for Enclosure to Close";
  Hold Until Valid ( Dome_Closed ) or 2:00;
  Validate Shutdown;
}

State Shutdown {
     > _Algo P1 Shutdown
  +1 > Enclosure Exit
  +1 > Sun Tracker Exit
  +1 > IFS Exit
  +1 > Startup Unexpected Clear
  +3 > Quit
}

Partition
#----------------------------------------------
# Partition 2: Watchdog
#----------------------------------------------

State Watchdog_Okay {
  depending on ( Dome_Failed ) { Validate Watchdog_Error; }
  depending on ( WTX_Failed ) { Validate Watchdog_Error; }
  #depending on ( IdleScan_Failed ) { Validate Watchdog_Error; }
  #depending on ( Pump_Failed ) { Validate Watchdog_Error; }
}

State Watchdog_Error {
}

Partition
#----------------------------------------------
# Partition 3: Weather
#----------------------------------------------

State Bad_Weather {
  { if (WTX_drv_stale == 255 || WTX_dev_stale == 255)
      Validate WTX_Failed; } 
  { if ( (convert(WTX_PrecipInt) == 0) &&
         convert(WTX_RH) < RH_Open_Pct /* && ws_low */ &&
         ok_to_open )
      Validate Good_Weather;
  }
  > _Algo P3 Bad_Weather
}

State Good_Weather {
  { if (WTX_drv_stale == 255 || WTX_dev_stale == 255)
      Validate WTX_Failed; } 
  { if (convert(WTX_PrecipInt) > 0 || convert(WTX_RH) > RH_Close_Pct) {
      Weather_Reason = "Rain";
      Validate Bad_Weather;
    }
  }
  { if ( convert(radiance_ratio) < Rad_Close_Pct ) {
      Weather_Reason = "Dark Sky";
      Validate Bad_Weather;
    }
  }
# { if ( ws_high ) {
#     Weather_Reason = "High Winds";
#     Validate Bad_Weather;
#   }
# }
  > _Algo P3 Good_Weather
}

State WTX_Failed {
   { msg (0, "WTX failure. Indicated by WTX stale counter." ); }
   > _Algo P3 WTX_Failed
   > Email Error Message WTX failure.  Indicated by WTX stale counter.
   +1:00 { if (WTX_drv_stale < 2 && WTX_dev_stale <2) Validate Bad_Weather; }
}

Partition
#----------------------------------------------
# Partition 4: Solar Partition
#   Solar_Eval: Figure out which quadrant we're in
#     Solar_Day_Ascending
#     Solar_Day_Descending
#     Solar_Night_Ascending
#     Solar_Night_Descending
#   Solar_Bedtime
#----------------------------------------------
{
  ST_elev_t Sol_ele0; Invalidate Sol_ele0;
  ST_elev_t dEle; Invalidate dEle;
  { depending on (Sol_ele0) {
      dEle = Sol_ele - Sol_ele0;
      Validate dEle;
    }
    Sol_ele0 = Sol_ele;
    Validate Sol_ele0;
  }
}

State Solar_Eval {
      > _Algo P4 Solar_Eval
   +1 {
        if (dEle > 0) {
          if (Sol_ele > 0)
            Validate Solar_Day_Ascending;
          else
            Validate Solar_Night_Ascending;
        } else if (dEle < 0) {
          if (Sol_ele > 0)
            Validate Solar_Day_Descending;
          else
            Validate Solar_Night_Descending;
        }
      }
}

State Solar_Night_Descending {
  > _Algo P4 Solar_Night_Descending
  { if (dEle > 0) {
      /* Midnight */
      Validate Solar_Night_Ascending;
    }
  }
}

State Solar_Night_Ascending {
  > _Algo P4 Solar_Night_Ascending
  { if (Sol_ele > 0) {
      /* Sunrise */
      Validate Solar_Day_Ascending;
    } else if (dEle < 0) {
      /* Midwinter noon: sun reverses direction w/o rising */
      Validate Solar_Bedtime;
    }
  }
}

State Solar_Day_Ascending {
  > _Algo P4 Solar_Day_Ascending
  { if (dEle < 0) {
      /* Noon */
      Validate Solar_Day_Descending;
    }
  }
}

State Solar_Day_Descending {
  > _Algo P4 Solar_Day_Descending
  { if (Sol_ele <= 0) {
      /* Sunset */
      Validate Solar_Bedtime;
    }
  }
}

State Solar_Bedtime {
  > _Algo P4 Solar_Bedtime
}


Partition
#----------------------------------------------
# Partition 5: Enclosure Control
#----------------------------------------------
State Dome_Holding {
}

# STEnc_pos&1 indicates Closed
# STEnc_pos&2 indicates Opened
State Dome_Close {
  { if ( STEnc_stale == 255 ) Validate Dome_Lost_Contact; }
  Hold Until ( !(STEnc_pos&1) ) or 2
  else Validate Dome_Closed;
  > Enclosure Close
  Hold Until (STEnc_pos&1) or 2:00
  else Validate Dome_Close_Failed;
  Validate Dome_Closed;
}

State Dome_Closed {
  { if ( STEnc_stale == 255 ) Validate Dome_Lost_Contact; }
}

State Dome_Open {
  { if ( STEnc_stale == 255 ) Validate Dome_Lost_Contact; }
  Hold Until (!(STEnc_pos&2)) or 2
  else Validate Dome_Opened;
  > Enclosure Open
  Hold Until (STEnc_pos&2) or 2:00
  else Validate Dome_Open_Failed;
  Validate Dome_Opened;
}

State Dome_Opened NoLog {
  { if (STEnc_stale == 255) Validate Dome_Lost_Contact; }
}

State Dome_Close_Failed {
  { msg( 2, "Enclosure failed to close" ); }
  > Email Error Message Enclosure failed to close
  Validate Dome_Failed;
}

State Dome_Open_Failed {
  { msg( 2, "Enclosure failed to open" ); }
  > Email Error Message Enclosure failed to open
  Validate Dome_Failed;
}

State Dome_Lost_Contact {
  { msg( 2, "Lost contact wtih Enclosure or driver" ); }
  > Email Error Message Lost contact with Enclosure or driver
  Validate Dome_Failed;
}

State Dome_Failed {}

Partition
#----------------------------------------------
# Partition 6: Pump Control
#----------------------------------------------

%{
  int pump_down_abort;
%}

State Pump_Idle {}

State Pump_Clear_to_Vent {}

State Pump_Down_Init {
#  { if ( convert( Pump_MtrT ) >= 50.0 ||
#         convert( Pump_BdyT ) >= 50.0 ) {
#      ci_sendfcmd(Cmd_Send,
#        "Email Error Message Pump Over Temperature during init: Mtr %.1lf C Bdy %.1lf C\n",
#        convert(Pump_MtrT), convert(Pump_BdyT));
#      Validate Power_Pump_Off;
#    }
#  }
   Validate Watchdog_Okay;
   { pump_down_abort = 0; }
   > Power Pump On
   Hold Until ( WP_Pump_S ) or 10
   else Validate Pump_Init_Failed;
   Hold Until ( convert(Pump_P) < 0.1 || pump_down_abort ) or 8:00
   else > Email Warning Message Pump Down Init is slow
   Hold Until ( convert(Pump_P) < 0.1 || pump_down_abort ) or 30:00;
   Hold Until ( convert(Pump_P) < 0.5 || pump_down_abort ) or 30:00;
   Hold Until ( convert(Pump_P) < 0.8 || pump_down_abort ) or 30:00
   else Validate Pump_Init_Failed;
   Hold Until (pump_down_abort) or 2
   else Validate Pump_Evacuate;
   Validate Power_Pump_Off;
}

State Pump_Evacuate {
    { if ( !WP_Pump_S ) Validate Pump_Evac_Failed; }
#   { if ( convert( Pump_MtrT ) >= 50.0 ||
#          convert( Pump_BdyT ) >= 50.0 ) {
#       ci_sendfcmd(Cmd_Send,
#         "Email Error Message Pump Over Temperature during Evac: Mtr %.1lf C Bdy %.1lf C\n",
#         convert(Pump_MtrT), convert(Pump_BdyT));
#       Validate Pump_OTevac;
#     }
#   }
      > IFS direct VAC=1
      Hold Until ( convert(IFS_P) < 0.5 || pump_down_abort ) or 5:00
      else > Email Warning Message Pump Down of IFS is slow
      Hold Until ( convert(IFS_P) < 0.5 || pump_down_abort ) or 40:00;
      Hold Until ( convert(IFS_P) < 0.9 || pump_down_abort ) or 30
      else Validate Pump_Evac_Failed;
  +10 Validate Pump_Evac_End;
}

State Pump_Evac_End {
    > IFS direct VAC=0
      Hold Until ( convert(Pump_P) < 0.8 ) or 2:00
      else Validate Pump_Evac_Failed;
    Hold Until (pump_down_abort) or 60;
      Hold Until ( convert(Pump_P) < 0.5 && convert(IFS_P) < 0.6 ) or 10
      else Validate Pump_Warn;
    Validate Power_Pump_Off;
}

State Pump_OTevac {
     > IFS direct VAC=0
    +2 Hold until (convert(Pump_P) < 0.1) or 1:00;
     Validate Power_Pump_Off;
}

State Pump_Warn {
     { /*
       ci_sendfcmd(Cmd_Send,
         "Email Warning Message Pump down results are marginal:"
         " IFS_P = %.2lf Pump_P = %.2lf\n",
         convert(IFS_P), convert(Pump_P)); */
       Validate Power_Pump_Off;
     }
}

State Power_Pump_Off {
      > Power Pump Off
  +10 Validate Pump_Idle;
}

State Pump_Init_Failed {
   +1 {
        ci_sendfcmd(Cmd_Send,
         "Email Error Message Pump Init Failed: %s: IFS_P = %.2lf Pump_P = %.2lf\n",
         text(WP_Pump_S), convert(IFS_P), convert(Pump_P));
      }
   +2 Validate Power_Pump_Off;
}

State Pump_Evac_Failed {
     > IFS direct VAC=0
     { ci_sendfcmd(Cmd_Send,
         "Email Error Message IFS Evacuation Failed: IFS_P = %.2lf Pump_P = %.2lf\n",
         convert(IFS_P), convert(Pump_P));
     }
  +2 Hold until (convert(Pump_P) < 0.1) or 3:00;
     Validate Power_Pump_Off;
}

State Pump_IFS_Prep {
     { pump_down_abort = 0; }
     Validate IFS_Status_Idle; # so as not to interfere with VAC=1
 +2  > IFS direct VAC=0
     > Power Pump On
     Hold Until ( WP_Pump_S ) or 10
     else Validate Pump_Init_Failed;
     Validate Pump_IFS_Prep2;
}

State Pump_IFS_Prep2 {
    { if ( !WP_Pump_S ) {
        Validate Pump_Evac_Failed;
      } else if (pump_down_abort) {
        Validate Pump_Evac_End;
      }
    }

    Hold Until (convert(Pump_P) < 0.1) or 8:00
    else Validate Pump_Init_Failed;
 +1 > IFS direct VAC=1
 +2 Validate IFS_Status_Update;
    Hold Until (convert(IFS_P) < 1.0) or 8:00;
    Validate Pump_IFS_Constantly;
}

State Pump_IFS_Constantly {
    # Combine pump_down_abort check with WP_Pump_S, since
    # pump_down_abort does not have a time dependency.
    { if ( !WP_Pump_S || convert(IFS_P) > 5.0) {
        Validate Pump_Evac_Failed;
      } else if (pump_down_abort) {
        Validate Pump_Evac_End;
      }
    }
#   { if ( convert( Pump_MtrT ) >= 50.0 ||
#          convert( Pump_BdyT ) >= 50.0 ) {
#       ci_sendfcmd(Cmd_Send,
#         "Email Error Message Pump Over Temperature during Evac: Mtr %.1lf C Bdy %.1lf C\n",
#         convert(Pump_MtrT), convert(Pump_BdyT));
#       Validate Pump_OTevac;
#     }
#   }
    # This now assumes we are either in IFS_Status_Update or
    # scanning.
    Hold Until ( convert(IFS_P) < 0.5) or 5:00
    else > Email Warning Message Pump Down of IFS is slow
}


Partition
#----------------------------------------------
# Partition 7: Idle Scanning
#----------------------------------------------

%{
  int scan_count = 0;
  unsigned long int last_IFSSlR = 0;
%}
State IdleScan_Wait NoLog {
  { if ( IFSCStat == IFS_SCAN_IDLE || IFSSlR != last_IFSSlR ) {
          scan_count = 0;
          last_IFSSlR = IFSSlR;
        } else if (++scan_count >= 300 ) {
          scan_count = 0;
          Validate IdleScan_Reset;
        }
  }
  Hold Until ( IFSCStat == IFS_SCAN_WAIT );
  Hold Until ( IFSCStat != IFS_SCAN_WAIT ) or 8
  else Validate IdleScan;
  Validate IdleScan_Wait;
}

State IdleScan NoLog {
  depending on (InSb_Chilled) { Validate InSbIdleScan; }
  +1 > IFS InGaAsIdleScan
     Validate IdleScan_Wait;
}

State InSbIdleScan NoLog {
  > IFS IdleScan
  Validate IdleScan_Wait;
}

State IdleScan_Reset {
  > IFS Reset SW
  { msg (0, "IFS SOFTWARE RESET" ); }
  > Email Report Message IFS125 has been reset in software.
  +10
  Hold Until ( IFSCStat == IFS_SCAN_WAIT || IFSCStat == IFS_SCAN_IDLE ) or 4:00 
  else Validate IdleScan_Failed;
  Validate IdleScan_Wait;
}

State IdleScan_Failed {
  { msg (0, "IFS125 failure.  Indicated by failure to recover after software reset." ); }
  > Email Error Message IFS125 failure. Indicated by failure to recover after software reset.
  +1:00 { if (IFSCStat == IFS_SCAN_WAIT || IFSCStat == IFS_SCAN_IDLE)
            Validate IdleScan_Wait;
        }
}

#Partition
#----------------------------------------------------------------
# Partition 8: Sun Tracker Status
#----------------------------------------------------------------

Partition
# -----------------------------------------------------------------------------
# Partition 9: Collect IFS_Status Information
# -----------------------------------------------------------------------------

State IFS_Status_Idle {}

State IFS_Status_Update NoLog {
  Hold Until ( IFSCStat == IFS_SCAN_IDLE  ) or 20
  else Validate IFS_Status_Failing;
  > _IFS Read Status
  +5 Validate IFS_Status_Update;
}

State IFS_Status_Failing {
  { msg( 2, "IFS Read Status is responding slowly" ); }
  +1:00 Validate IFS_Status_Update;
}

#Partition
#----------------------------------------------
# Partition 10: Air Temperature Monitor
#----------------------------------------------

#Partition
#----------------------------------------------
# Partition 11: IFS125 Temperature Monitor
#----------------------------------------------

#Partition
#----------------------------------------------
# Partition 12: External Power Monitor
#----------------------------------------------

Partition
#----------------------------------------------
# Partition 13: NorHof InSb Autofill Partition
#   Most of the state transitions are controlled from
#   the main partition
#    Transition from Startup => Fill during wakeup (For ETL)
#    Tranistion from Filled => Chilled is in Init_Decide (after gains are set)
#
# ETL algo has been significantly modified from Caltech/Lamont
#   Larger dewar allows for 24 hour hold. LN2 generator
#   reduces the marginal cost of LN2, so simply filling
#   every morning makes the most sense. We also can deal
#   with having the Norhof in autofill configuration.
#   When the Norhof is in autofill, it periodically runs the
#   fill without any commands, leaving the pump status 'active'.
#   Issuing 'LN2 Pump Off' will change the pump status to 'sleep',
#   making it possible to then fill under algo control.
#   As currently configured, this algo will detect a fill
#   operation, whether initiated by the algo or not, and issue
#   'LN2 Pump Off' upon completion, essentially defeating the
#   autofill setup. An earlier configuration demonstrated how
#   to simply use the autofill without explicit commands.
#----------------------------------------------
%{
  #include "LN2.h"
  #define INSB_T_LIMIT (-120)
  #define INSB_T_FULL (-190)
%}

State InSb_Startup {
  { if ((LN2DrvStat & LN2_DS_InSbT_CRNT) && (convert(InSbT) < INSB_T_LIMIT))
      Validate InSb_Filled;
  }
  { if ((LN2Stat & 6) == 6) /* LN2Pump && LN2Valve */
      Validate InSb_Filling; }
  { if (LN2Stat & 0x80) Validate InSb_Alarm; }
}

State InSb_Fill {
    > LN2 Pump On
    Hold until (((LN2PStat == 1) || LN2Pump) && LN2Valve) or 8
    else Validate InSb_Pump_not_started;
    Validate InSb_Filling;
}

State InSb_Filling {
      { if (LN2Stat & 0x80) Validate InSb_Alarm; }
      Hold until ((!LN2Pump && !LN2Valve && (convert(InSbT) < INSB_T_LIMIT)) ||
                  (convert(InSbT) <= INSB_T_FULL)) or 20:00
      else Validate InSb_Fill_timeout;
   +2 > LN2 Pump Off
   +1 Validate InSb_Filled;
}

# InSb_Filled means InSb is cold but detector gains may not have been set
State InSb_Filled {
  { if ((LN2DrvStat & LN2_DS_InSbT_CRNT) && (convert(InSbT) >= INSB_T_LIMIT))
      Validate InSb_Startup;
  }
  { if ((LN2Stat & 6) == 6) /* LN2Pump && LN2Valve */
      Validate InSb_Filling; }
  { if (LN2Stat & 0x80) Validate InSb_Alarm; }
}

# InSb_Chilled means InSb is cold and detector gains have been set
State InSb_Chilled NoLog {
  { if ((LN2Stat & 6) == 6) /* LN2Pump && LN2Valve */
      Validate InSb_Filling; }
  { if (LN2Stat & 0x80) Validate InSb_Alarm; }
  Hold until ((LN2DrvStat & LN2_DS_InSbT_CRNT) && (convert(InSbT) < INSB_T_LIMIT)) or 10
  else Validate InSb_Not_Chilled;
  Validate InSb_Chilled;
}

# InSb_Not_Chilled means we were once cold, but no more
State InSb_Not_Chilled {
  { if ((LN2Stat & 6) == 6) /* LN2Pump && LN2Valve */
      Validate InSb_Filling; }
  { if (LN2Stat & 0x80) Validate InSb_Alarm; }
  { if ((LN2DrvStat & LN2_DS_InSbT_CRNT) && (convert(InSbT) < INSB_T_LIMIT))
      Validate InSb_Chilled;
  }
}

State InSb_Pump_not_started {
  > Email Error Message LN2 Pump did not go active in InSb_Fill
  { if ((LN2Stat & 6) == 6) /* LN2Pump && LN2Valve */
      Validate InSb_Filling; }
  { if (LN2Stat & 0x80) Validate InSb_Alarm; }
  { if ((LN2DrvStat & LN2_DS_InSbT_CRNT) && (convert(InSbT) < INSB_T_LIMIT)) {
      ci_sendfcmd(Cmd_Send,
        "Email Report Message InSbT reports cold (%s) after non-start: continuing\n",
        text(InSbT));
      Validate InSb_Filled;
    }
  }
}

State InSb_Fill_timeout {
  > LN2 Pump Off
  > Email Error Message LN2 Fill not finished after 20 minutes
  { if (LN2Stat & 0x80) Validate InSb_Alarm; }
  { if ((LN2DrvStat & LN2_DS_InSbT_CRNT) && (convert(InSbT) < INSB_T_LIMIT)) {
      ci_sendfcmd(Cmd_Send,
        "Email Report Message InSbT reports cold (%s) after fill timeout: continuing\n",
        text(InSbT));
      Validate InSb_Filled;
    }
  }
}

State InSb_Alarm {
  > Email Error Message LN2 alarm is asserted
  > LN2 Pump Off
  Validate InSb_Alarm_Watch;
}

State InSb_Alarm_Watch NoLog {
  Hold until (!(LN2Stat & 0x80));
  Hold until (LN2Stat & 0x80) or 10:00
  else Validate InSb_Alarm_Clear;
  Validate InSb_Alarm_Watch;
}

State InSb_Alarm_Clear {
  > Email Report Message LN2 alarm has cleared
  Validate InSb_Startup;
}

Partition
#----------------------------------------------
# Partition 14: NorHof InSb Driver Monitor
#----------------------------------------------
%{
  int LN2_Drv_Stale = 0;
%}

State LN2_Watch NoLog {
  { if (LN2Stale >= 255)
      Validate LN2_Watch_Failure;
  }
  { if (LN2DrvStat & LN2_DS_CRNT)
      LN2_Drv_Stale = 0;
    else if (++LN2_Drv_Stale >= 255)
      Validate LN2_Watch_Failure;
  }
}

State LN2_Watch_Failure {
# > Email Error Message LN2 pump or driver not responding
  > Log LN2 pump or driver not responding
  { if (LN2DrvStat & LN2_DS_CRNT) {
      LN2_Drv_Stale = 0;
      Validate LN2_Watch;
    }
  }
}

#Partition
#----------------------------------------------
# Partition 15: O2 Sensor Monitor
#----------------------------------------------

#Partition
#----------------------------------------------
# Partition 16: Sun Tracker Monitor
#----------------------------------------------
